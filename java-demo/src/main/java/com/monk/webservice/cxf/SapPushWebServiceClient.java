
package com.monk.webservice.cxf;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.frontend.ClientProxyFactoryBean;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSONObject;

import sun.misc.BASE64Encoder;

/**
 * This class was generated by Apache CXF 3.0.2
 * 2019-05-14T14:22:31.766+08:00
 * Generated source version: 3.0.2
 * 
 */
public class SapPushWebServiceClient {

    private static Logger logger = LoggerFactory.getLogger(SapPushWebServiceClient.class);

    /**
     * 调用企业微信接口 WSDL地址
     */
    private static final String ESB_WEIXIN_WSDL_LOCATION = "esb.weixin.wsdl.location";

    /**
     * 是否启用发送微信通知功能
     */
    private static final String ESB_WEIXIN_ADVANCE_FLAG = "esb.weixin.advance.flag";

    /**
     * 调用企业微信接口 系统域名标识
     */
    private static final String ESB_WEIXIN_PUSHADDRESS = "esb.weixin.pushaddress";

    /**
     * 是否启用发送微信通知功能标识
     */
    private static final String ADVANCE_FLAG_Y = "Y";

    /**
     * 是否启用发送微信通知功能标识
     */
    private static final String ADVANCE_FLAG_N = "N";

    /**
     * 发送微信通知
     * 
     * @param content
     *            消息内容
     * @param toUser
     *            成员ID列表（消息接收者，多个接收者用‘|’分隔，最多支持1000个）。特殊情况：指定为@all，则向该企业应用的全部成员发送
     * @return 调用接口返回值
     * @author Monk
     * @date 2019年5月6日 上午11:48:38
     */
    public Map<String, Object> sendWx(String content, String toUser) {
        logger.info("content:[" + content + "], to user : [" + toUser + "].");
        Map<String, Object> result = new HashMap<String, Object>();

//        String advanceFlag = SysConfigCache.getConfigByName(ESB_WEIXIN_ADVANCE_FLAG);
        String advanceFlag = "";
        advanceFlag = StringUtils.isBlank(advanceFlag) ? ADVANCE_FLAG_Y : advanceFlag;
        if (advanceFlag.equals(ADVANCE_FLAG_N)) {
            logger.warn(
                    "The config WeiXin advance flag is \"N\", don't send any WeChat messages. If you want send Wechat messages, please set the config esb.weixin.advance.flag = \"Y\".");
            return result;
        }

        // 系统域名标识
//        String pushAddress = SysConfigCache.getConfigByName(ESB_WEIXIN_PUSHADDRESS);
        String pushAddress = "10.150.95.7";
        if (StringUtils.isEmpty(pushAddress)) {
            logger.warn("esb.weixin.pushaddress config not set.");
            result.put("errcode", -1);
            result.put("errmsg", "pushaddress is null.");
            return result;
        }
        // 部门ID列表，多个接收者用‘|’分隔，最多支持100个。当touser为@all时忽略本参数
        String toParty = "";
        // 标签ID列表，多个接收者用‘|’分隔，最多支持100个。当touser为@all时忽略本参数
        String toTag = "";
        // 消息类型，文本模式：text
        String msgType = "text";
        // 消息内容，传输的中文字符最长不超过2048个字节，超过将腾讯会截断，注意：调用接口，内容需要进行base64编码
        String textContent = "";
        try {
            textContent = new BASE64Encoder().encode(content.getBytes("utf-8"));
        } catch (UnsupportedEncodingException e) {
            logger.error("Encoding the content error. " + e.getMessage());
            result.put("errcode", -1);
            result.put("errmsg", "Encoding the content error. " + e.getMessage());
            return result;
        }
        // 表示是否是保密消息，0表示否，1表示是，默认0
        String safe = "";
        String textCardTitle = "";
        String textCardDesc = "";
        String textCardUrl = "";
        String textCardBtnTxt = "";

        logger.info("Invoking sappushwebservice...");
        SapPushWebService port = buildSapPushWebService();
        String returnMsg = port.sappushwebservice(pushAddress, toUser, toParty, toTag, msgType, textContent,
                textCardTitle, textCardDesc, textCardUrl, textCardBtnTxt, safe);
        logger.info("sappushwebservice.result=" + returnMsg);
        result = (Map<String, Object>) JSONObject.parse(returnMsg);
        logger.info("invoke client end. parse result=" + result);
        return result;
    }

    /**
     * 构建服务客户端 创建导入邮件信息服务客户端
     * 
     * @return 导入邮件信息服务客户端
     * @author houyongchuan
     * @date 2018年4月22日 下午10:48:59
     */
    public SapPushWebService buildSapPushWebService() {
        // 创建客户端factory
        ClientProxyFactoryBean factory = new JaxWsProxyFactoryBean();
        factory.getInInterceptors().add(new LoggingInInterceptor());
        factory.getOutInterceptors().add(new LoggingOutInterceptor());
        // 设置接口类
        factory.setServiceClass(SapPushWebService.class);
        // 设置服务端点地址
//        String endpointUrl = SysConfigCache.getConfigByName(ESB_WEIXIN_WSDL_LOCATION);
        String endpointUrl = "http://10.204.103.243:8088/sapPushWebServiceImplServiceSoap?WSDL";
        logger.info(endpointUrl);
        factory.setAddress(endpointUrl);

        SapPushWebService serviceClient = (SapPushWebService) factory.create();
        logger.info("serviceClient create sucess." + serviceClient);

        // 客户端超时设置
        Client proxy = ClientProxy.getClient(serviceClient);
        HTTPConduit http = (HTTPConduit) proxy.getConduit();
        HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
        httpClientPolicy.setConnectionTimeout(3000);
        httpClientPolicy.setReceiveTimeout(60000);
        http.setClient(httpClientPolicy);
        return serviceClient;
    }

}
